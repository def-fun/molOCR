/*! MolView JavaScript App build on 2020-07-30 */

var History = {
    init: function () {
        window.addEventListener("popstate", function (e) {
            var t = getQuery();
            JSON.stringify(t) !== JSON.stringify(MolView.query) && (document.title = "MolView", MolView.query = t, MolView.executeQuery())
        })
    }, push: function (e, t, o) {
        t = "" + t, MolView.query = {}, MolView.query[e] = t;
        var a = e + "=" + specialEncodeURIComponent(t.replace(/^ /, ""));
        history && history.replaceState && history.pushState && -1 === location.search.indexOf(a) && ("" === location.search || o ? history.replaceState(null, document.title, "?" + a) : history.pushState(null, document.title, "?" + a))
    }
}, Sketcher = {
    molpad: void 0, metadata: {cid: void 0, inchi: void 0, inchikey: void 0, smiles: void 0}, init: function () {
        MPFragments.init(), this.initPeriodicTable(), this.resizeToolbars(), $("#action-mp-color-mode").toggleClass("tool-button-selected", Preferences.get("sketcher", "colored", !0)), $("#action-mp-skeletal-formula").toggleClass("tool-button-selected", !Preferences.get("sketcher", "skeletal_formula", !0)), Detector.canvas ? (this.molpad = new MolPad(document.getElementById("molpad-canvas-wrapper"), MolView.devicePixelRatio, {
            undo: "#action-mp-undo",
            redo: "#action-mp-redo"
        }), this.molpad.setSkeletalDisplay(Preferences.get("sketcher", "skeletal_formula", !0)), this.setColored(Preferences.get("sketcher", "colored", !0)), this.setTool($("#action-mp-lasso"), "select", {type: "lasso"}), MolView.loadDefault && this.loadMOL(defaultMol2D), this.molpad.onChange(function () {
            Sketcher.metadata = {}, Sketcher.molpad.mol.copy.fingerprint === Sketcher.fingerprint ? Sketcher.markUpdated() : Sketcher.markOutdated()
        })) : Messages.alert("no_canvas_support")
    }, resize: function () {
        this.molpad && (this.resizeToolbars(), this.molpad.resize())
    }, resizeToolbars: function () {
        var e = 40 + $("#edit-tools").css("height", 40).scrollTop(40).scrollTop(),
            t = 40 + $("#chem-tools").css("width", 40).scrollLeft(40).scrollLeft(),
            o = 40 + $("#elem-tools").css("width", 40).scrollLeft(40).scrollLeft();
        $("#edit-tools").css({left: t, height: e}), $("#chem-tools").css({width: t}), $("#elem-tools").css({
            top: e,
            width: o
        }), $("#molpad-canvas-wrapper").css({top: e, left: t, right: o})
    }, initPeriodicTable: function () {
        var e = PeriodicTable.table;
        e.push({elements: PeriodicTable.lanthanoids}), e.push({elements: PeriodicTable.actinoids});
        for (var t = 0; t < e.length; t++) {
            for (var o = -1, a = 0; a < e[t].elements.length; a++) {
                var s = e[t].elements[a];
                if ("" !== s.name) {
                    for (var i = o; i < s.position - 1; i++) $('<div class="pt-space"></div>').appendTo("#periodictable");
                    $('<div class="pt-element"></div>').attr("title", s.name).append($("<h3></h3>").html(s.number)).append($("<h4></h4>").html(s.small).css("color", JmolAtomColorsHashHex[s.small])).data("element", s.small).on(MolView.trigger, function () {
                        $("#molpad .primary-tool").removeClass("tool-button-selected"), $("#action-mp-periodictable").addClass("tool-button-selected"), Sketcher.molpad.setTool("atom", {element: $(this).data("element")}), MolView.hideDialogs()
                    }).appendTo("#periodictable"), o = s.position
                }
            }
            $("<br/>").appendTo("#periodictable")
        }
    }, loadMOL: function (e) {
        this.molpad && this.molpad.loadMOL(e)
    }, getMOL: function () {
        return this.molpad ? this.molpad.getMOL() : ""
    }, getSMILES: function () {
        return this.metadata.smiles ? this.metadata.smiles : this.molpad ? (this.metadata.smiles = this.molpad.getSMILES(), this.metadata.smiles) : ""
    }, setTool: function (e, t, o) {
        this.molpad && this.molpad.setTool(t, o), $(".primary-tool").removeClass("tool-button-selected"), $(e).addClass("tool-button-selected")
    }, clear: function () {
        this.molpad && this.molpad.clear()
    }, undo: function () {
        this.molpad && this.molpad.undo()
    }, redo: function () {
        this.molpad && this.molpad.redo()
    }, setColored: function (e) {
        this.molpad && ($(".tool-element").toggleClass("element-colored", e), Preferences.set("sketcher", "colored", e), this.molpad.setColored(e))
    }, toggleColorMode: function () {
        this.molpad && this.setColored($("#action-mp-color-mode").toggleClass("tool-button-selected").hasClass("tool-button-selected"))
    }, toggleSkeletalFormula: function () {
        var e;
        this.molpad && (e = !$("#action-mp-skeletal-formula").toggleClass("tool-button-selected").hasClass("tool-button-selected"), Preferences.set("sketcher", "skeletal_formula", e), this.molpad.setSkeletalDisplay(e))
    }, center: function () {
        this.molpad && this.molpad.center()
    }, clean: function () {
        Messages.process(Loader.clean, "clean")
    }, markOutdated: function () {
        $("#action-resolve").addClass("resolve-outdated")
    }, markUpdated: function () {
        this.fingerprint = this.molpad.mol.copy.fingerprint, $("#action-resolve").removeClass("resolve-outdated")
    }, toDataURL: function () {
        return this.molpad ? this.molpad.toDataURL() : ""
    }
}, SearchGrid = {
    db: "", init: function () {
        $("#search-layer").on("scroll", function (e) {
            $("#search-layer").scrollTop() + $("#search-layer").outerHeight() > $("#search-layer > .container").outerHeight() && ("pubchem" === SearchGrid.db ? Actions.load_more_pubchem() : "rcsb" === SearchGrid.db ? Actions.load_more_rcsb() : "cod" === SearchGrid.db && Actions.load_more_cod())
        })
    }, clear: function () {
        $("#search-layer").scrollTop(), $("#search-layer .container").empty().css("margin-bottom", 0)
    }, setDatabase: function (e) {
        this.db = e, $("#action-load-more-pubchem").css("display", "pubchem" === e ? "block" : "none"), $("#action-load-more-rcsb").css("display", "rcsb" === e ? "block" : "none"), $("#action-load-more-cod").css("display", "cod" === e ? "block" : "none")
    }, startLoading: function () {
        $("#action-load-more-" + this.db).addClass("load-more-progress")
    }, endLoading: function (e) {
        e ? ($(".load-more").css("display", "none"), $("#search-layer .container").css("margin-bottom", 100)) : $("#action-load-more-" + this.db).removeClass("load-more-progress")
    }, addEntry: function (e) {
        if ("pubchem" === this.db) {
            if (!e.CID) return;
            var t = $('<a class="search-result search-result-pubchem"></a>').attr("href", "?cid=" + e.CID).appendTo("#search-layer .container");
            e.Title && (a = $('<div class="search-result-title"><span>' + ucfirst(humanize(e.Title)) + "</span></div>"), t.append(a), a.textfill({maxFontPoints: 26}));
            var o = $('<div class="search-result-img-wrap"></div>');
            (s = new Image).onload = function () {
                o.css("background-image", "none")
            }, s.src = Request.PubChem.image(e.CID, t.width()), $("<div class='search-result-img'></div>").css("background-image", "url(" + s.src + ")").css("-webkit-filter", "url('#pubchemImageFilter')").css("-moz-filter", "url('#pubchemImageFilter')").css("-ms-filter", "url('#pubchemImageFilter')").css("-o-filter", "url('#pubchemImageFilter')").css("filter", "url('#pubchemImageFilter')").height(t.width()).appendTo(o.appendTo(t)), t.data("cid", e.CID), t.data("title", ucfirst(humanize(e.Title))), t.on("click", function (e) {
                if (2 !== e.which) return MolView.pushEvent("button", "click", "pubchem search", 0), MolView.setLayer("main"), Loader.PubChem.loadCID($(this).data("cid"), $(this).data("title")), !1
            })
        } else if ("rcsb" === this.db) {
            if (!e.structureId || !e.structureTitle) return;
            var t = $('<div class="search-result"></div>').appendTo("#search-layer .container"),
                a = $('<a class="search-result-title"><span>' + e.structureId + "</span></a>").attr("href", "?pdbid=" + e.structureId);
            t.append(a), a.textfill({maxFontPoints: 26});
            var s, i = 500 / MolView.devicePixelRatio, o = $('<div class="search-result-img-wrap"></div>');
            (s = new Image).onload = function () {
                o.css("background-image", "none")
            }, s.src = Request.RCSB.image(e.structureId), $('<div class="search-result-img"></div>').css("background-image", "url(" + s.src + ")").css("background-size", 250 < i ? 250 : i).height(t.width()).appendTo(o.appendTo(t));
            var n = $('<div class="search-result-description">' + ucfirst(humanize(e.structureTitle)) + "</div>");
            t.append(n), a.data("pdbid", e.structureId), a.on("click", function (e) {
                if (2 !== e.which) return MolView.pushEvent("button", "click", "rcsb search", 0), MolView.setLayer("main"), Loader.RCSB.loadPDBID($(this).data("pdbid")), !1
            })
        } else if ("cod" === this.db) {
            if (!e.codid) return;
            t = $('<div class="search-result"></div>').appendTo("#search-layer .container");
            e.formula = formatMFormula(e.formula);
            var r = e.mineral || e.commonname || e.chemname || e.formula || e.codid,
                a = $('<a class="search-result-title"><span>' + r + "</span></a>").attr("href", "?codid=" + e.codid);
            t.append(a), a.textfill({maxFontPoints: 26}), $('<div class="search-result-codid">' + e.codid + "</div>").appendTo(t);
            n = $('<div class="search-result-description search-result-description-cod"></div>').appendTo(t);
            e.title && $('<div class="expandable"><div class="expandable-title"><span>Details</span></div><div class="expandable-content">' + formatHTMLLinks(formatMFormula(e.title)) + "</div></div>").appendTo(n).children(".expandable-title").on(MolView.trigger, function (e) {
                $(this).parent().toggleClass("open")
            }), e.mineral && $("<p><b>Mineral name</b><br/><span>" + e.mineral + "</span></p>").appendTo(n), e.commonname && $("<p><b>Common name</b><br/><span>" + e.commonname + "</span></p>").appendTo(n), e.chemname && $("<p><b>Chemical name</b><br/><span>" + e.chemname + "</span></p>").appendTo(n), e.formula && $("<p><b>Molecular formula</b><br/><span>" + formatMFormula(e.formula.replace(/-/g, "").replace(/\s/g, "")) + "</span></p>").appendTo(n), a.data("codid", e.codid), a.data("title", r), a.on("click", function (e) {
                if (2 !== e.which) return MolView.pushEvent("button", "click", "cod search", 0), MolView.setLayer("main"), Loader.COD.loadCODID($(this).data("codid"), $(this).data("title")), !1
            })
        }
    }
}, Loader = {
    lastQuery: {type: "", content: ""}, setQuery: function (e, t, o) {
        t = String(t), this.lastQuery.type = e, this.lastQuery.content = t, History.push(e, t, o), $("#model-source").removeClass("disabled"), "q" === e || "smiles" === e ? $("#model-source").text("3D model source").removeAttr().addClass("disabled") : "cid" === e ? $("#model-source").text("PubChem source").attr("href", Request.PubChem.staticURL(t)) : "pdbid" === e ? $("#model-source").text("RCSB source").attr("href", Request.RCSB.staticURL(t)) : "codid" === e && $("#model-source").text("COD source").attr("href", Request.COD.staticURL(t))
    }, CIRsearch: function (e, t) {
        var o;
        Request.CIR.available ? (t || Progress.reset(3), o = e || $("#search-input").val(), Request.CIRsearch(o, function (e, t, o) {
            Sketcher.loadMOL(e), Sketcher.markUpdated(), Model.loadMOL(t), o = ucfirst(o), document.title = o, Progress.complete(), Messages.clear(), Loader.setQuery("q", o)
        }, function () {
            Messages.alert("load_fail")
        })) : Messages.alert("cir_func_down")
    }, PubChem: {
        i: 0, step: 10, loading: !1, ssli: 1e3, loadCIDS: function (e) {
            0 !== e.length && Request.PubChem.description(e, function (e) {
                for (var t = [], o = 0; o < e.InformationList.Information.length; o++) {
                    var a = e.InformationList.Information[o].CID;
                    -1 === t.indexOf(a) && (t.push(a), SearchGrid.addEntry(e.InformationList.Information[o]))
                }
                SearchGrid.endLoading(Loader.PubChem.i >= Request.PubChem.data.length), Loader.PubChem.loading = !1, Progress.complete()
            }, function () {
                Messages.alert("remote_noreach")
            })
        }, loadNextSet: function () {
            var e, t;
            this.loading || this.i < Request.PubChem.data.length && (this.loading = !0, SearchGrid.startLoading(), e = this.i, (t = this.i + this.step) > Request.PubChem.data.length && (t = Request.PubChem.data.length), this.loadCIDS(Request.PubChem.data.slice(e, t)), this.i = t)
        }, search: function () {
            var e = $("#search-input").val();
            Progress.reset(3), Request.PubChem.search(e, function () {
                Messages.clear(), Actions.show_search_layer(), SearchGrid.setDatabase("pubchem"), SearchGrid.clear(), Loader.PubChem.i = 0, Loader.PubChem.loadNextSet()
            }, function (e) {
                Messages.alert(404 === e ? "search_notfound" : "search_fail")
            })
        }, structureSearch: function (e, t, o) {
            Progress.reset(3), Request.PubChem.structureSearch(e, t, o, function (o) {
                Progress.increment(), function t() {
                    Request.PubChem.list(o, function () {
                        Progress.increment(), Messages.clear(), Actions.show_search_layer(), SearchGrid.setDatabase("pubchem"), SearchGrid.clear(), Loader.PubChem.i = 0, Loader.PubChem.loadNextSet()
                    }, function (e) {
                        o = e, window.setTimeout(t, Loader.PubChem.ssli)
                    }, function (e) {
                        Messages.alert("search_fail")
                    })
                }()
            }, function (e) {
                Messages.alert(404 === e ? "search_notfound" : "search_fail")
            })
        }, loadName: function (t, e) {
            Progress.reset(e ? 9 : 6), Messages.process(function () {
                Request.PubChem.nameToCID(t, function (e) {
                    Progress.increment(), Loader.PubChem._loadCID(e, ucfirst(t))
                }, function () {
                    e ? Loader.CIRsearch(t, !0) : Messages.alert("load_fail")
                })
            }, "compound")
        }, loadCID: function (e, t) {
            Progress.reset(4), t = ucfirst(t), Messages.process(function () {
                Loader.PubChem._loadCID(e, t)
            }, "compound")
        }, _loadCID: function (o, a) {
            Request.PubChem.sdf(o, !0, function (t) {
                Sketcher.loadMOL(t), Sketcher.metadata.cid = o, Sketcher.markUpdated(), Progress.increment(), Request.PubChem.sdf(o, !1, function (e) {
                    Model.loadMOL(e), document.title = a || "MolView", Loader.setQuery("cid", o), Progress.complete(), Messages.clear()
                }, function () {
                    var e;
                    Progress.increment();
                    try {
                        e = Sketcher.getSMILES()
                    } catch (e) {
                        return Model.loadMOL(t), Sketcher.markUpdated(), document.title = a || "MolView", Loader.setQuery("cid", o), Progress.complete(), void Messages.clear()
                    }
                    Progress.increment(), Request.CIR.resolve(e, !1, function (e) {
                        Model.loadMOL(e), Sketcher.markUpdated(), document.title = a || "MolView", Loader.setQuery("cid", o), Progress.complete(), Messages.clear()
                    }, function () {
                        Model.loadMOL(t), Sketcher.markUpdated(), document.title = a || "MolView", Loader.setQuery("cid", o), Progress.complete(), Messages.clear()
                    })
                })
            }, function () {
                Messages.alert("load_fail")
            })
        }
    }, RCSB: {
        i: 0, step: 10, loading: !1, loadPDBIDS: function (e) {
            0 !== e.length && Request.RCSB.information(e, function (e) {
                for (var t = 0; t < e.dataset.length; t++) SearchGrid.addEntry(e.dataset[t]);
                SearchGrid.endLoading(Loader.RCSB.i >= Request.RCSB.data.length), Loader.RCSB.loading = !1, Progress.complete()
            }, function () {
                Messages.alert("remote_noreach")
            })
        }, loadNextSet: function () {
            var e, t;
            this.loading || this.i < Request.RCSB.data.length && (this.loading = !0, SearchGrid.startLoading(), e = this.i, (t = this.i + this.step) > Request.RCSB.data.length && (t = Request.RCSB.data.length), this.loadPDBIDS(Request.RCSB.data.slice(e, t)), this.i = t)
        }, search: function () {
            var e = $("#search-input").val();
            Progress.reset(3), Request.RCSB.search(e, function () {
                Messages.clear(), Actions.show_search_layer(), SearchGrid.setDatabase("rcsb"), SearchGrid.clear(), Loader.RCSB.i = 0, Loader.RCSB.loadNextSet()
            }, function () {
                Messages.alert("search_fail")
            })
        }, loadPDBID: function (e, t) {
            function o() {
                Sketcher.markOutdated(), document.title = t || e.toUpperCase(), Progress.complete(), Messages.clear(), Loader.setQuery("pdbid", e)
            }

            Progress.reset(2), MolView.setLayout("model"), Messages.process(function () {
                Progress.increment(), Request.RCSB.PDB(e, function (e) {
                    Detector.webgl ? Model.isGLmol() ? (Model.loadPDB(e), o()) : (Model.preloadPDB(e), Model.setRenderEngine("GLmol", o)) : MolView.mobile ? Messages.alert("mobile_old_no_macromolecules") : Model.isJSmol() ? (Model.loadPDB(e), o()) : (Model.preloadPDB(e), Model.setRenderEngine("JSmol", o))
                }, function () {
                    Messages.alert("load_fail")
                })
            }, "macromolecule")
        }
    }, COD: {
        i: 0, step: 10, loading: !1, loadNextSet: function () {
            SearchGrid.startLoading(), window.setTimeout(function () {
                if (!this.loading && this.i < Request.COD.data.length) {
                    for (var e = this.i + this.step; this.i < Request.COD.data.length && this.i < e; this.i++) SearchGrid.addEntry(Request.COD.data[this.i]);
                    SearchGrid.endLoading(Loader.COD.i >= Request.COD.data.length), this.loading = !1, Progress.complete()
                }
            }.bind(this), 300)
        }, search: function () {
            var e = $("#search-input").val();
            Progress.reset(3), Request.COD.search(e, function () {
                Messages.clear(), Actions.show_search_layer(), SearchGrid.setDatabase("cod"), SearchGrid.clear(), Loader.COD.i = 0, Loader.COD.loadNextSet()
            }, function (e) {
                Messages.alert(e ? "remote_noreach" : "search_fail")
            })
        }, loadCODID: function (t, o, a) {
            function s() {
                document.title = o || "COD: " + t, Progress.complete(), Messages.clear(), Loader.setQuery("codid", t)
            }

            function i() {
                var o;
                o = function (e, t) {
                    e ? (Sketcher.metadata.smiles = t, Sketcher.loadMOL(e, !0), Sketcher.markUpdated(), s(), Messages.alert("crystal_2d_unreliable")) : (s(), Messages.alert("crystal_2d_fail"))
                }, Request.COD.smiles(t, function (t) {
                    Progress.increment(), "" === t.records[0].smiles ? o(null) : Request.CIR.resolve(t.records[0].smiles, !0, function (e) {
                        o(e, t.records[0].smiles)
                    }, function () {
                        o(null)
                    })
                }, function () {
                    o(null)
                })
            }

            function n(e) {
                Request.PubChem.nameToCID(e, function (t) {
                    Progress.increment(), Request.PubChem.sdf(t, !0, function (e) {
                        Sketcher.metadata.cid = t, Sketcher.loadMOL(e), Sketcher.markUpdated(), s(), Messages.alert("crystal_2d_unreliable")
                    }, function () {
                        s(), Messages.alert("crystal_2d_fail")
                    })
                }, i)
            }

            Progress.reset(4), MolView.makeModelVisible(), Messages.process(function () {
                Request.COD.CIF(t, function (e) {
                    Model.loadCIF(e, [1, 1, 1], function () {
                        Progress.increment(), void 0 !== a ? Request.PubChem.primaryName(a, function (e) {
                            Progress.increment(), e.toLowerCase() === a.toLowerCase() ? n(e) : i()
                        }, i) : void 0 === o || "MolView" === o ? Request.COD.name(t, function (e) {
                            Progress.increment(), "" !== e.records[0].name ? n(e.records[0].name) : i()
                        }, i) : n(o)
                    })
                }, function () {
                    Messages.alert("load_fail")
                })
            }, "crystal")
        }
    }, clean: function () {
        var e;
        Progress.reset(4);
        try {
            e = Sketcher.getSMILES()
        } catch (e) {
            return void Messages.alert("smiles_load_error", e)
        }
        Request.resolve(e, 0, !0, function (e, t) {
            Sketcher.loadMOL(e), Progress.complete(), Messages.clear()
        }, function () {
            Messages.alert("load_fail")
        })
    }, resolve: function () {
        var o;
        Progress.reset(4);
        try {
            o = Sketcher.getSMILES()
        } catch (e) {
            return void Messages.alert("smiles_load_error", e)
        }
        Request.resolve(o, 0, !1, function (e, t) {
            Messages.alert("resolved_3d_unreliable"), Model.loadMOL(e), Sketcher.markUpdated(), 0 < t ? (Sketcher.metadata.cid = t, Loader.setQuery("cid", t)) : Loader.setQuery("smiles", o), Progress.complete(), Messages.clear(), document.title = "MolView", "sketcher" === MolView.layout && MolView.setLayout("model")
        }, function () {
            Messages.alert("load_fail")
        })
    }, loadSMILES: function (o, a) {
        Progress.reset(4), Request.resolve(o, 0, !1, function (e, t) {
            Progress.increment(), Model.loadMOL(e), Request.resolve(o, t, !0, function (e, t) {
                Sketcher.loadMOL(e), Sketcher.markUpdated(), 0 < t ? (Sketcher.metadata.cid = t, Loader.setQuery("cid", t, !0)) : Loader.setQuery("smiles", o), Progress.complete(), Messages.clear(), document.title = a || "MolView"
            }, function () {
                Messages.alert("load_fail")
            })
        }, function () {
            Messages.alert("load_fail")
        })
    }
}, Actions = {
    layout_sketcher: function () {
        MolView.setLayout("sketcher")
    }, layout_model: function () {
        MolView.setLayout("model")
    }, layout_vsplit: function () {
        MolView.setLayout("vsplit")
    }, layout_hsplit: function () {
        MolView.setLayout("hsplit")
    }, theme_desktop: function () {
        MolView.setTheme("desktop")
    }, theme_touch: function () {
        MolView.setTheme("touch")
    }, help: function () {
        MolView.showDialog("help")
    }, about: function () {
        MolView.showDialog("about")
    }, share: function () {
        Link.updateShareDialog(), MolView.showDialog("share")
    }, embed: function () {
        Link.updateEmbedDialog(), MolView.showDialog("embed")
    }, export_sketcher_png: function () {
        var e = Sketcher.toDataURL(), t = dataURItoBlob(e);
        null !== t && saveAs(t, document.title + " (structural formula).png")
    }, export_model_png: function () {
        var e = Model.getImageDataURL(), t = dataURItoBlob(e);
        null !== t && saveAs(t, document.title + " (model).png")
    }, export_model: function () {
        var e = Model.getFileBlob();
        saveAs(e, document.title + "." + Model.getFileExstension().toLowerCase())
    }, data_infocard: function () {
        var e;
        try {
            e = Sketcher.getSMILES()
        } catch (e) {
            return void Messages.alert("smiles_load_error_force", e)
        }
        InfoCard.update(e), InfoCard.load(), MolView.setLayer("infocard")
    }, data_spectra: function () {
        var e;
        try {
            e = Sketcher.getSMILES()
        } catch (e) {
            return void Messages.alert("smiles_load_error_force", e)
        }
        Spectroscopy.data.smiles && Spectroscopy.data.smiles === e || Spectroscopy.update(e), MolView.setLayer("spectra"), Spectroscopy.resize()
    }, search_substructure: function () {
        MolView.hideDialogs(), MolView.setLayer("main"), Messages.process(function () {
            if (Sketcher.metadata.cid) Loader.PubChem.structureSearch("cid", Sketcher.metadata.cid, "substructure"); else {
                var e;
                try {
                    e = Sketcher.getSMILES()
                } catch (e) {
                    return void Messages.alert("smiles_load_error_force", e)
                }
                Loader.PubChem.structureSearch("smiles", e, "substructure")
            }
        }, "search")
    }, search_superstructure: function () {
        MolView.hideDialogs(), MolView.setLayer("main"), Messages.process(function () {
            if (Sketcher.metadata.cid) Loader.PubChem.structureSearch("cid", Sketcher.metadata.cid, "superstructure"); else {
                var e;
                try {
                    e = Sketcher.getSMILES()
                } catch (e) {
                    return void Messages.alert("smiles_load_error_force", e)
                }
                Loader.PubChem.structureSearch("smiles", e, "superstructure")
            }
        }, "search")
    }, search_similarity: function () {
        MolView.hideDialogs(), MolView.setLayer("main"), Messages.process(function () {
            if (Sketcher.metadata.cid) Loader.PubChem.structureSearch("cid", Sketcher.metadata.cid, "similarity"); else {
                var e;
                try {
                    e = Sketcher.getSMILES()
                } catch (e) {
                    return void Messages.alert("smiles_load_error_force", e)
                }
                Loader.PubChem.structureSearch("smiles", e, "similarity")
            }
        }, "search")
    }, model_reset: function () {
        Model.reset()
    }, model_balls: function () {
        Model.setRepresentation("balls")
    }, model_stick: function () {
        Model.setRepresentation("stick")
    }, model_vdw: function () {
        Model.setRepresentation("vdw")
    }, model_wireframe: function () {
        Model.setRepresentation("wireframe")
    }, model_line: function () {
        Model.setRepresentation("line")
    }, model_bg_black: function () {
        Model.setBackground("black")
    }, model_bg_gray: function () {
        Model.setBackground("gray")
    }, model_bg_white: function () {
        Model.setBackground("white")
    }, engine_glmol: function () {
        Messages.clear(), Messages.process(function () {
            Model.setRenderEngine("GLmol", Messages.clear)
        }, "switch_engine")
    }, engine_jmol: function () {
        Messages.clear(), Messages.process(function () {
            Model.setRenderEngine("JSmol", Messages.clear)
        }, "switch_engine")
    }, engine_cdw: function () {
        Messages.clear(), Messages.process(function () {
            Model.setRenderEngine("CDW", Messages.clear)
        }, "switch_engine")
    }, cif_unit_cell: function () {
        Model.isCIF() && Messages.process(function () {
            Model.loadCIF(Model.data.cif, [1, 1, 1]), Messages.clear()
        }, "crystal_structure")
    }, cif_cubic_supercell: function () {
        Model.isCIF() && Messages.process(function () {
            Model.loadCIF(Model.data.cif, [2, 2, 2]), Messages.clear()
        }, "crystal_structure")
    }, cif_flat_supercell: function () {
        Model.isCIF() && Messages.process(function () {
            Model.loadCIF(Model.data.cif, [1, 3, 3]), Messages.clear()
        }, "crystal_structure")
    }, bio_assembly: function () {
        Model.setBioAssembly(!Model.displayBU)
    }, chain_type_ribbon: function () {
        Model.setChainType($("#action-chain-type-ribbon").hasClass("checked") ? "none" : "ribbon")
    }, chain_type_cylinders: function () {
        Model.setChainType($("#action-chain-type-cylinders").hasClass("checked") ? "none" : "cylinders")
    }, chain_type_btube: function () {
        Model.setChainType($("#action-chain-type-btube").hasClass("checked") ? "none" : "btube")
    }, chain_type_ctrace: function () {
        Model.setChainType($("#action-chain-type-ctrace").hasClass("checked") ? "none" : "ctrace")
    }, chain_type_bonds: function () {
        Model.setChainBonds(!$("#action-chain-type-bonds").hasClass("checked"))
    }, chain_color_ss: function () {
        Model.setChainColor("ss")
    }, chain_color_spectrum: function () {
        Model.setChainColor("spectrum")
    }, chain_color_chain: function () {
        Model.setChainColor("chain")
    }, chain_color_residue: function () {
        Model.setChainColor("residue")
    }, chain_color_polarity: function () {
        Model.setChainColor("polarity")
    }, chain_color_bfactor: function () {
        Model.setChainColor("bfactor")
    }, jmol_clean: function () {
        Model.JSmol.clean()
    }, jmol_hq: function () {
        Model.JSmol.setQuality(!$("#action-jmol-hq").hasClass("checked"))
    }, jmol_mep_lucent: function () {
        Model.JSmol.loadMEPSurface(!0), Messages.alert("calculation_unreliable")
    }, jmol_mep_opaque: function () {
        Model.JSmol.loadMEPSurface(!1), Messages.alert("calculation_unreliable")
    }, jmol_charge: function () {
        Model.JSmol.displayCharge(), Messages.alert("calculation_unreliable")
    }, jmol_bond_dipoles: function () {
        Model.JSmol.displayDipoles(), Messages.alert("calculation_unreliable")
    }, jmol_net_dipole: function () {
        Model.JSmol.displayNetDipole(), Messages.alert("calculation_unreliable")
    }, jmol_minimize: function () {
        Model.JSmol.calculateEnergyMinimization(), Messages.alert("calculation_unreliable")
    }, jmol_measure_distance: function () {
        Messages.alert("measurements_unreliable"), Model.JSmol.setMeasure($("#action-jmol-measure-distance").hasClass("checked") ? "OFF" : "DISTANCE")
    }, jmol_measure_angle: function () {
        Messages.alert("measurements_unreliable"), Model.JSmol.setMeasure($("#action-jmol-measure-angle").hasClass("checked") ? "OFF" : "ANGLE")
    }, jmol_measure_torsion: function () {
        Messages.alert("measurements_unreliable"), Model.JSmol.setMeasure($("#action-jmol-measure-torsion").hasClass("checked") ? "OFF" : "TORSION")
    }, search_pubchem: function () {
        "" === $("#search-input").val() ? MolView.alertEmptyInput() : ($("#search-input").blur(), MolView.hideDialogs(), Messages.process(Loader.PubChem.search, "search"))
    }, search_rcsb: function () {
        "" === $("#search-input").val() ? MolView.alertEmptyInput() : ($("#search-input").blur(), MolView.hideDialogs(), Messages.process(Loader.RCSB.search, "search"))
    }, search_cod: function () {
        "" === $("#search-input").val() ? MolView.alertEmptyInput() : ($("#search-input").blur(), MolView.hideDialogs(), Messages.process(Loader.COD.search, "search"))
    }, show_search_layer: function () {
        MolView.setLayer("search")
    }, load_more_pubchem: function () {
        Loader.PubChem.loadNextSet()
    }, load_more_rcsb: function () {
        Loader.RCSB.loadNextSet()
    }, load_more_cod: function () {
        Loader.COD.loadNextSet()
    }, mp_bond_single: function () {
        Sketcher.setTool(this, "bond", {type: MP_BOND_SINGLE})
    }, mp_bond_double: function () {
        Sketcher.setTool(this, "bond", {type: MP_BOND_DOUBLE})
    }, mp_bond_triple: function () {
        Sketcher.setTool(this, "bond", {type: MP_BOND_TRIPLE})
    }, mp_bond_wedge: function () {
        Sketcher.setTool(this, "bond", {stereo: MP_STEREO_UP})
    }, mp_bond_hash: function () {
        Sketcher.setTool(this, "bond", {stereo: MP_STEREO_DOWN})
    }, mp_frag_benzene: function () {
        Sketcher.setTool(this, "fragment", {frag: MPFragments.benzene})
    }, mp_frag_cyclopropane: function () {
        Sketcher.setTool(this, "fragment", {frag: MPFragments.cyclopropane})
    }, mp_frag_cyclobutane: function () {
        Sketcher.setTool(this, "fragment", {frag: MPFragments.cyclobutane})
    }, mp_frag_cyclopentane: function () {
        Sketcher.setTool(this, "fragment", {frag: MPFragments.cyclopentane})
    }, mp_frag_cyclohexane: function () {
        Sketcher.setTool(this, "fragment", {frag: MPFragments.cyclohexane})
    }, mp_frag_cycloheptane: function () {
        Sketcher.setTool(this, "fragment", {frag: MPFragments.cycloheptane})
    }, mp_chain: function () {
        Sketcher.setTool(this, "chain", {})
    }, mp_charge_add: function () {
        Sketcher.setTool(this, "charge", {charge: 1})
    }, mp_charge_sub: function () {
        Sketcher.setTool(this, "charge", {charge: -1})
    }, mp_clear: function () {
        Sketcher.clear()
    }, mp_eraser: function () {
        Sketcher.setTool(this, "erase", {})
    }, mp_drag: function () {
        Sketcher.setTool(this, "drag", {})
    }, mp_undo: function () {
        Sketcher.undo()
    }, mp_redo: function () {
        Sketcher.redo()
    }, mp_rect: function () {
        Sketcher.setTool(this, "select", {type: "rect"})
    }, mp_lasso: function () {
        Sketcher.setTool(this, "select", {type: "lasso"})
    }, mp_color_mode: function () {
        Sketcher.toggleColorMode()
    }, mp_skeletal_formula: function () {
        Sketcher.toggleSkeletalFormula()
    }, mp_center: function () {
        Sketcher.center()
    }, mp_clean: function () {
        Sketcher.clean()
    }, mp_atom_c: function () {
        Sketcher.setTool(this, "atom", {element: "C"})
    }, mp_atom_h: function () {
        Sketcher.setTool(this, "atom", {element: "H"})
    }, mp_atom_n: function () {
        Sketcher.setTool(this, "atom", {element: "N"})
    }, mp_atom_o: function () {
        Sketcher.setTool(this, "atom", {element: "O"})
    }, mp_atom_p: function () {
        Sketcher.setTool(this, "atom", {element: "P"})
    }, mp_atom_s: function () {
        Sketcher.setTool(this, "atom", {element: "S"})
    }, mp_atom_f: function () {
        Sketcher.setTool(this, "atom", {element: "F"})
    }, mp_atom_cl: function () {
        Sketcher.setTool(this, "atom", {element: "Cl"})
    }, mp_atom_br: function () {
        Sketcher.setTool(this, "atom", {element: "Br"})
    }, mp_atom_i: function () {
        Sketcher.setTool(this, "atom", {element: "I"})
    }, mp_periodictable: function () {
        MolView.showDialog("periodictable")
    }, resolve: function () {
        Messages.process(Loader.resolve, "resolve")
    }, start_help: function () {
        MolView.showDialog("help")
    }, export_spectrum_png: function () {
        var e, t;
        Spectroscopy.data[$("#spectrum-select").val()] ? (e = document.getElementById("spectrum-canvas").toDataURL("image/png"), null !== (t = dataURItoBlob(e)) && saveAs(t, $("#spectrum-select").find("option:selected").text() + ".png")) : alert("No spectrum selected!")
    }, export_spectrum_jcamp: function () {
        var e;
        Spectroscopy.data[$("#spectrum-select").val()] ? null !== (e = new Blob([Spectroscopy.data[$("#spectrum-select").val()]], {type: "chemical/x-jcamp-dx;charset=utf-8"})) && saveAs(e, $("#spectrum-select").find("option:selected").text() + ".jdx") : alert("No spectrum selected!")
    }
};
$.fn.share = function (e, o, a) {
    this.children().each(function () {
        var t;
        $(this).hasClass("share-facebook") ? ((t = $(this)).empty().unbind(), o ? AJAX({
            url: "https://api.facebook.com/method/fql.query?query=" + encodeURIComponent("select total_count from link_stat where url='" + (e.fb || e.all) + "'") + "&format=json&callback=?",
            dataType: "jsonp",
            success: function (e) {
                t.data("total_count", e[0].total_count), $("<span></span>").html(e[0].total_count + " Likes").appendTo(t)
            }
        }) : $("<span></span>").html("Facebook").appendTo(t), t.on("click", function () {
            window.open("https://www.facebook.com/sharer/sharer.php?u=" + encodeURIComponent(e.fb || e.all))
        })) : $(this).hasClass("share-twitter") ? ((t = $(this)).empty().unbind(), o ? AJAX({
            url: "http://cdn.api.twitter.com/1/urls/count.json?url=" + encodeURIComponent(e.twitter || e.all) + "&callback=?",
            dataType: "jsonp",
            success: function (e) {
                t.data("count", e.count), $("<span></span>").html(e.count + " Tweets").appendTo(t)
            }
        }) : $("<span></span>").html("Twitter").appendTo(t), t.on("click", function () {
            window.open("https://twitter.com/intent/tweet?text=" + encodeURIComponent(a || "View chemical structures using this free webapp!") + "&url=" + encodeURIComponent(e.twitter || e.all) + "&via=molview")
        })) : $(this).hasClass("share-googleplus") && ((t = $(this)).empty().unbind(), o ? AJAX({
            url: "api/gplus?url=" + encodeURIComponent(e.gplus || e.all),
            dataType: "json",
            success: function (e) {
                t.data("count", e.count), $("<span></span>").html(e.count + " +1's").appendTo(t)
            }
        }) : $("<span></span>").html("Google+").appendTo(t), t.on("click", function () {
            window.open("https://plus.google.com/share?hl=en-US&url=" + encodeURIComponent(e.gplus || e.all))
        }))
    })
};
var Link = {
        embedHTML: "", init: function () {
            $("#embed-width, #embed-height").on("keyup", this.updateEmbedDialog)
        }, updateShareDialog: function () {
            $("#action-resolve").hasClass("resolve-outdated") && "model" !== MolView.layout ? $("#share-2d-not-3d").show() : $("#share-2d-not-3d").hide();
            var e = window.location.origin + window.location.pathname, t = "";
            "" !== Loader.lastQuery.type && (t = "Cool structure on MolView!", e += "?" + Loader.lastQuery.type + "=" + specialEncodeURIComponent(Loader.lastQuery.content.replace(/^ /, ""))), $("#share-link").val(e), $("#share-dialog .social").share({all: e}, !1, t)
        }, updateEmbedDialog: function () {
            $("#action-resolve").hasClass("resolve-outdated") && "model" !== MolView.layout ? $("#embed-2d-not-3d").show() : $("#embed-2d-not-3d").hide();
            var e = "https://embed.molview.org/v1/?mode=" + Model.representation;
            oneOf(Loader.lastQuery.type, ["smiles", "cid", "pdbid", "codid"]) && (e += "&" + Loader.lastQuery.type + "=" + specialEncodeURIComponent(Loader.lastQuery.content.replace(/^ /, ""))), "black" !== Model.bg.colorName && (e += "&bg=" + Model.bg.colorName), Model.isPDB() && ("ribbon" !== Model.chain.type && "cylinders" !== Model.chain.type && "btube" !== Model.chain.type && "ctrace" !== Model.chain.type || (e += "&chainType=" + Model.chain.type), Model.chain.bonds && ("none" === Model.chain.type ? e += "&chainType=bonds" : e += "&chainBonds=true"), Model.chain.color && (e += "&chainColor=" + Model.chain.color)), Link.embedHTML = '<iframe style="width: ' + $("#embed-width").val() + "; height: " + $("#embed-height").val() + ';" frameborder="0" src="' + e + '"></iframe>', $("#embed-code").val(Link.embedHTML), $("#embed-url").val(e)
        }
    }, PubChemProps = {
        formula: "MolecularFormula",
        mw: "MolecularWeight",
        donors: "HBondDonorCount",
        acceptors: "HBondAcceptorCount",
        sysname: "IUPACName",
        canonicalsmiles: "CanonicalSMILES",
        isomericsmiles: "IsomericSMILES",
        inchikey: "InChIKey",
        inchi: "InChI"
    },
    PubChemPropNames = ["MolecularFormula", "MolecularWeight", "HBondDonorCount", "HBondAcceptorCount", "IUPACName", "CanonicalSMILES", "IsomericSMILES", "InChIKey", "InChI"],
    CIRProps = {
        formula: "formula",
        mw: "mw",
        donors: "h_bond_donor_count",
        acceptors: "h_bond_acceptor_count",
        sysname: "iupac_name",
        canonicalsmiles: "smiles",
        inchikey: "stdinchikey",
        inchi: "stdinchi",
        cas: "cas",
        csid: "chemspider_id"
    }, InfoCard = {
        PubChem_cache: void 0,
        PubChem_queue: [],
        data: {},
        updated: !1,
        percentCompositionPrecision: 5,
        update: function (e) {
            return this.data.smiles !== e && "" !== e && ($(".chemprop").html("").val("").addClass("chemprop-loading"), $("#molecule-image").css("filter", "url('#pubchemImageFilter'"), $("#molecule-image").attr("src", emptyImage), $("#molecule-image-wrapper").show(), $("#molecule-info").hide(), $("#molecule-title").text(""), $("#molecule-description").text(""), $("#percent-composition-table, #percent-composition-title").hide(), $("#common-chem-props tr").show(), $(".chem-identifier").show(), $(".chem-link").hide(), this.PubChem_cache = void 0, this.PubChem_queue = [], this.data = {}, this.data.smiles = e, this.data.cid = Sketcher.metadata.cid, this.data.inchikey = Sketcher.metadata.inchikey, this.data.inchi = Sketcher.metadata.inchi, !(this.updated = !1))
        },
        load: function () {
            this.updated || (this.updated = !0, this.updateImage(), this.loadProperty("cid", function (e) {
                e && $("#pubchem-link").attr("href", Request.PubChem.staticURL(e)).show(), InfoCard.loadProperty("formula"), InfoCard.loadProperty("mw"), InfoCard.loadProperty("donors"), InfoCard.loadProperty("acceptors"), InfoCard.loadProperty("sysname"), InfoCard.loadProperty("canonicalsmiles"), InfoCard.loadProperty("isomericsmiles", function (e) {
                }), InfoCard.loadProperty("inchikey"), InfoCard.loadProperty("inchi", function (e) {
                }), InfoCard.loadProperty("cas"), InfoCard.loadProperty("csid", function (e) {
                    e && $("#chemspider-link").attr("href", "http://www.chemspider.com/Chemical-Structure." + e + ".html").show()
                }), e && Request.PubChem.description(e, function (e) {
                    for (var t, o, a = 0; a < e.InformationList.Information.length; a++) void 0 === t && void 0 !== e.InformationList.Information[a].Title && (t = ucfirst(humanize(e.InformationList.Information[a].Title))), void 0 === o && void 0 !== e.InformationList.Information[a].Description && (o = e.InformationList.Information[a].Description);
                    document.title = t, $("#molecule-info").show(), $("#molecule-title").html(t), $("#molecule-description").html(o)
                })
            }))
        },
        processFormula: function (e) {
            var t;
            for (this.data.molecule = {}, regex = /((?:[A-Z][a-z]?))([\d,.]*)/g; null !== (t = regex.exec(e));) this.data.molecule[t[1]] = parseFloat(t[2]) || 1;
            $("#percent-composition-title").show(), $("#percent-composition-table").empty().show();
            var o = 0;
            return jQuery.each(this.data.molecule, function (e, t) {
                o += ElementsMolarTable[e] * t
            }), jQuery.each(this.data.molecule, function (e, t) {
                $("#percent-composition-table").append("<tr>\t\t\t\t<td>" + e + "</td>\t\t\t\t<td>" + ElementsMolarTable[e] + " u &times; " + t + "</td>\t\t\t\t<td>" + (ElementsMolarTable[e] * t / o * 100).toPrecision(InfoCard.percentCompositionPrecision) + " %</td>\t\t\t</tr>")
            }), formatMFormula(e)
        },
        updateImage: function () {
            var e;
            "" !== InfoCard.smiles && ((e = new Image).onload = function () {
                $("#molecule-image").attr("src", e.src), $("#molecule-image").css("width", 300 / MolView.devicePixelRatio), $("#molecule-image-wrapper").show()
            }, e.onerror = function () {
                $("#molecule-image").attr("src", emptyImage), $("#molecule-image-wrapper").hide()
            }, Sketcher.metadata.cid ? e.src = Request.PubChem.image(Sketcher.metadata.cid) : e.src = Request.PubChem.smilesToImage(InfoCard.data.smiles))
        },
        loadProperty: function (o, a) {
            InfoCard.getProperty(o, function (e) {
                "mw" === o && (e += " u");
                var t = $("#prop-" + o);
                t.is("input") ? t.val(e).removeClass("chemprop-loading") : t.html(e).removeClass("chemprop-loading"), a && a(e)
            }, function () {
                $("#prop-" + o + "-wrapper").hide(), a && a()
            })
        },
        getProperty: function (e, t, o) {
            function a() {
                "isomericsmiles" === e ? (InfoCard.data.isomericsmiles = InfoCard.data.smiles, t(InfoCard.data.isomericsmiles)) : o && o()
            }

            InfoCard.data[e] ? t(InfoCard.data[e]) : "cid" === e ? Request.PubChem.smilesToCID(InfoCard.data.smiles, function (e) {
                InfoCard.data.cid = e, t(InfoCard.data.cid)
            }, function () {
                InfoCard.data.cid = -1, a()
            }) : InfoCard.getPropertyFromPubChem(e, t, a)
        },
        getPropertyFromPubChem: function (o, a, s) {
            -1 === InfoCard.data.cid ? InfoCard.getPropertyFromCIR(o, a, s) : InfoCard.data.cid && "cas" === o ? Request.PubChem.casNumber(InfoCard.data.cid, function (e) {
                InfoCard.data.cas = e, a(InfoCard.data.cas)
            }, function () {
                InfoCard.getPropertyFromCIR(o, a, s)
            }) : PubChemProps[o] ? InfoCard.PubChem_cache ? InfoCard.loadFrom_PubChem_cache(o, a, function () {
                InfoCard.getPropertyFromCIR(o, a, s)
            }) : InfoCard.data.cid && (InfoCard.PubChem_cache = {loading: !0}, Request.PubChem.properties(InfoCard.data.cid, PubChemPropNames, function (e) {
                InfoCard.PubChem_cache = e.PropertyTable.Properties[0] || {failed: !0};
                for (var t = 0; t < InfoCard.PubChem_queue.length; t++) InfoCard.PubChem_queue[t].success();
                InfoCard.PubChem_queue = [], InfoCard.loadFrom_PubChem_cache(o, a, function () {
                    InfoCard.getPropertyFromCIR(o, a, s)
                })
            }, function () {
                for (var e = 0; e < InfoCard.PubChem_queue.length; e++) InfoCard.PubChem_queue[e].fail();
                InfoCard.PubChem_queue = [], InfoCard.PubChem_cache = {failed: !0}, InfoCard.getPropertyFromCIR(o, a, s)
            })) : InfoCard.getPropertyFromCIR(o, a, s)
        },
        getPropertyFromCIR: function (t, o, e) {
            InfoCard.data.smiles && void 0 !== CIRProps[t] ? Request.CIR.property(InfoCard.data.isomericsmiles || InfoCard.data.smiles, CIRProps[t], function (e) {
                "formula" === t ? InfoCard.data.formula = InfoCard.processFormula(e) : "sysname" === t ? InfoCard.data.sysname = humanize(e) : InfoCard.data[t] = e, o(InfoCard.data[t])
            }, e) : e()
        },
        loadFrom_PubChem_cache: function (e, t, o) {
            function a(e) {
                return void 0 !== InfoCard.PubChem_cache[PubChemProps[e]] && (InfoCard.data[e] = "formula" === e ? InfoCard.processFormula(InfoCard.PubChem_cache[PubChemProps[e]]) : InfoCard.PubChem_cache[PubChemProps[e]], 1)
            }

            !InfoCard.PubChem_cache || InfoCard.PubChem_cache.failed ? o() : InfoCard.PubChem_cache.loading ? InfoCard.PubChem_queue.push({
                success: function () {
                    a(e) ? t(InfoCard.data[e]) : o()
                }, fail: o
            }) : a(e) ? t(InfoCard.data[e]) : o()
        }
    }, Spectroscopy = {
        data: {}, spectrum: void 0, spectrumRatio: 1 / .3, init: function () {
            $(window).on("resize", function () {
                $("#spectra-layer").is(":visible") && Spectroscopy.resize()
            }), $("#spectrum-select").on("change", function () {
                Spectroscopy.load($("#spectrum-select").val())
            }), MolView.mobile ? ($("#spectrum-wrapper").on("touchmove", function (e) {
                e.stopImmediatePropagation()
            }), this.spectrum_ratio = 2, this.spectrum = new ChemDoodle.ObserverCanvas("spectrum-canvas", 100, 100)) : this.spectrum = new ChemDoodle.SeekerCanvas("spectrum-canvas", 100, 100, ChemDoodle.SeekerCanvas.SEEK_PLOT), this.spectrum.specs.plots_showYAxis = !0, this.spectrum.specs.plots_flipXAxis = !0, this.spectrum.specs.plots_showGrid = !0, this.spectrum.specs.backgroundColor = "#ffffff", this.spectrum.emptyMessage = "No spectrum selected"
        }, update: function (e) {
            function o() {
                $("#spectrum-select").empty(), $("#spectrum-select").append('<option value="default" disabled selected style="display:none;">There are no spectra available</option>'), $("#spectrum").removeClass("loading")
            }

            this.data = {}, InfoCard.update(e), $("#spectrum-nist-source").hide(), $("#spectrum").addClass("loading"), $("#spectrum-select").html('<option value="loading" selected>Loading&hellip;</option>').val("loading"), this.print("No spectrum selected"), InfoCard.getProperty("cas", function (e) {
                Spectroscopy.data.cas = e, Request.NIST.lookup(Spectroscopy.data.cas, function (e) {
                    if ($("#spectrum-select").empty(), $("#spectrum-select").append('<option value="default" disabled selected style="display:none;">Choose a spectrum</option>'), e.mass && $("#spectrum-select").append('<option value="nist-mass">Mass spectrum</option>'), void 0 !== e.ir) for (var t = 0; t < e.ir.length; t++) $("#spectrum-select").append('<option value="nist-ir-' + e.ir[t].i + '">IR spectrum [' + e.ir[t].state + "]</option>");
                    e.mass || void 0 !== e.ir && 0 < e.ir.length ? ($("#spectrum").removeClass("loading"), $("#spectrum-nist-source").attr("href", e.url).show()) : o()
                }, o)
            }, o)
        }, load: function (t) {
            function o() {
                var e = ChemDoodle.readJCAMP(Spectroscopy.data.nmrdb);
                e.title = ucfirst(humanize(e.title)), e.yUnit = ucfirst(humanize(e.yUnit)), Spectroscopy.spectrum.specs.plots_flipXAxis = !0, Spectroscopy.spectrum.loadSpectrum(e), $("#spectrum").removeClass("loading")
            }

            function a() {
                var e = ChemDoodle.readJCAMP(Spectroscopy.data[t]);
                e.title = ucfirst(humanize(e.title)), e.yUnit = ucfirst(humanize(e.yUnit)), Spectroscopy.spectrum.specs.plots_flipXAxis = "nist-mass" !== t, Spectroscopy.spectrum.loadSpectrum(e), $("#spectrum").removeClass("loading")
            }

            this.print("Loading…"), $("#spectrum").addClass("loading"), "nmrdb" === t ? this.data.nmrdb ? o() : InfoCard.getProperty("smiles", function (e) {
                Request.NMRdb.prediction(e, function (e) {
                    Spectroscopy.data.nmrdb = e, o()
                }, function () {
                    Spectroscopy.print("Spectrum unavailable")
                })
            }) : t.indexOf(!0) && (Spectroscopy.data[t] ? a() : Request.NIST.spectrum(this.data.cas, t.substr(5), function (e) {
                Spectroscopy.data[t] = e, a()
            }, function () {
                Spectroscopy.print("Spectrum unavailable")
            }))
        }, print: function (e) {
            Spectroscopy.spectrum.emptyMessage = e, Spectroscopy.spectrum.loadSpectrum(null)
        }, resize: function () {
            var e = $("#spectrum-wrapper").width(), t = Math.round(e / Spectroscopy.spectrumRatio);
            Spectroscopy.spectrum.resize(e * MolView.devicePixelRatio, t * MolView.devicePixelRatio), $("#spectrum-canvas").css({
                width: e * MolView.devicePixelRatio,
                height: t * MolView.devicePixelRatio
            })
        }
    };

function AutocompleteBuilder(e, t) {
    this.array = e, this.key = t
}

AutocompleteBuilder.prototype.sort = function (e, t, o) {
    e = e.toLowerCase();
    for (var a = this.array.slice(0), s = 0; s < a.length; s++) a[s].similarity = similar_text(e, a[s][this.key].toLowerCase(), !0), 0 === a[s][this.key].toLowerCase().indexOf(e) && (a[s].similarity += 100), t && a[s].similarity < t && (a.splice(s, 1), s--);
    return a.sort(function (e, t) {
        return t.similarity - e.similarity
    }).slice(0, o || a.length)
};
var Autocomplete = {
    MIN_SIM: 40,
    MAX_NUMBER: 10,
    minLength: 1,
    maxLength: 32,
    maxResults: 20,
    macromolecules: void 0,
    minerals: void 0,
    oldText: "",
    cache: {},
    records: [],
    i: -1,
    init: function () {
        for (var e = 0; e < PDBNames.macromolecules.length; e++) PDBNames.macromolecules[e].label = PDBNames.macromolecules[e].name;
        for (e = 0; e < MineralNames.records.length; e++) MineralNames.records[e].label = ucfirst(MineralNames.records[e].name);
        this.macromolecules = new AutocompleteBuilder(PDBNames.macromolecules, "name"), this.minerals = new AutocompleteBuilder(MineralNames.records, "name"), $("#search-input")[0].addEventListener("input", Autocomplete.refresh.bind(Autocomplete)), $("#search-input").on("keydown", Autocomplete.keydown.bind(Autocomplete)), $("#search").on("submit", function (e) {
            e.preventDefault(), Autocomplete.submit()
        }), $("#search-input").on("focus", function () {
            this.select(), Autocomplete.focus()
        }), $(window).on(MolView.trigger, function (e) {
            var t = $("#search-input, #autocomplete-dropdown");
            t.is(e.target) || 0 !== t.has(e.target).length || Autocomplete.hide()
        }), $(window).on("blur", Autocomplete.hide)
    },
    focusRecord: function (e) {
        -1 < e && e < Autocomplete.records.length && $("#search-input").val(Autocomplete.records[e].label), $(".autocomplete-item").removeClass("autocomplete-item-active");
        var t, o = $(".autocomplete-item").eq(e);
        -1 !== e && (o.addClass("autocomplete-item-active"), (t = o.position()).top + o.outerHeight() > $("#autocomplete-dropdown").outerHeight() ? $("#autocomplete-dropdown").scrollTop($("#autocomplete-dropdown").scrollTop() - $("#autocomplete-dropdown").outerHeight() + t.top + o.outerHeight()) : t.top < 0 && $("#autocomplete-dropdown").scrollTop($("#autocomplete-dropdown").scrollTop() + t.top))
    },
    keydown: function (e) {
        switch (-1 === this.i && (this.oldText = $("#search-input").val()), e.keyCode || e.which) {
            case 27:
                return this.hide(), $("#search-input").blur(), !0;
            case 38:
                return this.i--, -1 === this.i ? $("#search-input").val(this.oldText) : this.i < -1 && (this.i = this.records.length - 1), this.focusRecord(this.i), !0;
            case 40:
                return this.i++, this.i >= this.records.length && (this.i = 0), this.focusRecord(this.i), !0;
            case 39:
                if (document.getElementById("search-input").selectionStart === $("#search-input").val().length) {
                    var t = this.records.filter(function (e) {
                        return 0 === e.name.toLowerCase().indexOf($("#search-input").val().toLowerCase())
                    });
                    return 0 < t.length && $("#search-input").val(t[0].label), !0
                }
        }
    },
    refresh: function () {
        var o, a = $("#search-input").val().toLowerCase();
        if (Autocomplete.cache[a]) Autocomplete.display(Autocomplete.cache[a]); else {
            if (a.length > Autocomplete.maxLength) return;
            a.length < Autocomplete.minLength ? Autocomplete.display([]) : (o = [], o = !MolView.macromolecules || !Detector.webgl && MolView.mobile ? this.minerals.sort(a, this.MIN_SIM, this.MAX_NUMBER).slice(0) : this.macromolecules.sort(a, this.MIN_SIM, this.MAX_NUMBER).slice(0).concat(this.minerals.sort(a, this.MIN_SIM, this.MAX_NUMBER).slice(0)), this.getPubChemAutocomplete(a, function (e) {
                for (var t = 0; t < e.length; t++) e[t].label = ucfirst(humanize(e[t].name));
                o = new AutocompleteBuilder(o = o.concat(e), "label").sort(a);
                for (t = 0; t < o.length; t++) t < o.length - 1 && o[t].label === o[t + 1].label && (o[t].codid = o[t].codid || o[t + 1].codid, o[t].PubChem_name = o[t].PubChem_name || o[t + 1].PubChem_name, o.splice(t + 1, 1));
                Autocomplete.cache[a] = o, a === $("#search-input").val().toLowerCase() && Autocomplete.display(Autocomplete.cache[a])
            }))
        }
    },
    display: function (e) {
        Autocomplete.records = e, Autocomplete.i = -1, $("#autocomplete-dropdown").empty();
        for (var t = $("<ul></ul>"), o = $("#search-input").val().toLowerCase(), a = 0; a < e.length; a++) {
            var s = $('<li class="autocomplete-item"></li>');
            0 === e[a].label.toLowerCase().indexOf(o) ? $('<span class="autocomplete-label"></span>').html("<b>" + e[a].label.substr(0, o.length) + "</b>" + e[a].label.substr(o.length)).appendTo(s) : $('<span class="autocomplete-label"></span>').html(e[a].label).appendTo(s), e[a].pdbids ? (s.addClass("autocomplete-macromolecule"), $('<span class="autocomplete-type"></span>').html(PDBNames.types[e[a].type]).appendTo(s)) : e[a].codid ? (s.addClass("autocomplete-mineral"), $('<span class="autocomplete-type"></span>').html("Mineral").appendTo(s)) : (s.addClass("autocomplete-pubchem"), $('<span class="autocomplete-type"></span>').html("Compound").appendTo(s)), $('<div style="clear: both;"></div>').appendTo(s), s.data("i", a), s.on(MolView.trigger, function () {
                Autocomplete.i = $(this).data("i"), Autocomplete.submit()
            }), t.append(s)
        }
        $("#autocomplete-dropdown").append(t), 0 < e.length ? $("#autocomplete-dropdown").show() : $("#autocomplete-dropdown").hide()
    },
    focus: function () {
        Autocomplete.i = -1, $(".autocomplete-item").removeClass("autocomplete-item-active"), $("#autocomplete-dropdown-wrapper").show(), $("#autocomplete-dropdown").hide(), $("#menu").scrollLeft($("#brand").is(":visible") ? 55 : 0)
    },
    hide: function () {
        $("#autocomplete-dropdown-wrapper").hide()
    },
    submit: function () {
        if (MolView.pushEvent("input", "submit", "autocomplete", 0), "" === $("#search-input").val()) $("#search-input").focus(), MolView.alertEmptyInput(); else {
            if (this.hide(), $("#search-input").blur(), MolView.hideDialogs(), MolView.setLayer("main"), -1 === this.i) for (var e = 0; e < this.records.length; e++) if (this.records[e].name.toLowerCase() == $("#search-input").val().toLowerCase()) {
                this.i = e;
                break
            }
            var t;
            -1 === this.i ? (t = $("#search-input").val(), void 0 === Autocomplete.cache[t] ? Loader.PubChem.loadName(t, !0) : Messages.process(Loader.CIRsearch, "search")) : ($("#search-input").val(this.records[this.i].label), this.records[this.i].pdbids ? Loader.RCSB.loadPDBID(this.records[this.i].pdbids[0], this.records[this.i].label) : this.records[this.i].codid ? Loader.COD.loadCODID(this.records[this.i].codid, this.records[this.i].label, this.records[this.i].PubChem_name) : Loader.PubChem.loadName(this.records[this.i].label), this.refresh())
        }
    },
    getPubChemAutocomplete: function (e, a) {
        AJAX({
            dataType: "json",
            url: "https://pubchem.ncbi.nlm.nih.gov/pcautocp/pcautocp.cgi?dict=pc_compoundnames&n=" + this.MAX_NUMBER + "&q=" + e,
            success: function (e) {
                for (var t = [], o = 0; o < e.autocp_array.length; o++) t.push({
                    name: e.autocp_array[o],
                    PubChem_name: e.autocp_array[o]
                });
                a(t)
            }
        })
    }
}, MolView = {
    layout: "",
    touch: !1,
    mobile: !1,
    devicePixelRatio: 1,
    trigger: "click",
    query: {},
    loadDefault: !0,
    macromolecules: !0,
    JMOL_J2S_PATH: "jmol/j2s",
    init: function () {
        window.onerror = function (e, t, o, a) {
            ga("send", "exception", {exDescription: t + " " + o + "," + a + ": " + e, exFatal: !1})
        }, $(document).ajaxError(function (e, t, o) {
            ga("send", "exception", {
                exDescription: "AJAX error: " + o.type + " " + o.url + ": " + t.statusText,
                exFatal: !1
            })
        }), MolView.devicePixelRatio = window.devicePixelRatio || (MolView.mobile ? 1.5 : 1), Preferences.init(), Progress.init(), History.init(), Link.init(), Model.preloadQuery(this.query), (this.query.q || this.query.smiles || this.query.cid || this.query.pdbid || this.query.codid) && (this.loadDefault = !1), Spectroscopy.init(), Autocomplete.init(), Request.init(), Sketcher.init(), SearchGrid.init(), this.touch && !Detector.webgl && (this.macromolecules = !1, Model.JSmol.setQuality(!1)), this.height = window.innerHeight, $(".dropdown-menu").css("max-height", $("#content").height() - 10), $("#main-layer").saveSize(), $(window).on("resize", function () {
            $(".dropdown-menu").css("max-height", $("#content").height() - 10), MolView.setMenuLayout($(window).width() < 1100, $(window).width() < 1100 && !MolView.touch, $(window).width() < 390 && MolView.touch), Progress.resize(), $("#main-layer").is(":hidden") || ($("#main-layer").saveSize(), Sketcher.resize(), Model.resize())
        }), $(".dropdown-toggle").on(this.trigger, function (e) {
            e.stopPropagation(), Autocomplete.hide(), $(".dropdown-toggle").not(this).parent().removeClass("open"), $("#menu").toggleClass("menu-open", $(this).parent().toggleClass("open").hasClass("open")).scrollTop(0)
        }), this.touch || $(".dropdown-toggle").hover(function (e) {
            $("#menu").hasClass("menu-open") && (e.stopPropagation(), $(".dropdown").removeClass("open"), $(this).parent().addClass("open"))
        }, function () {
        }), $(".dropdown-menu a").on(this.trigger, function (e) {
            $(this).hasClass("disabled") ? e.stopImmediatePropagation() : ($(".dropdown-toggle").not(this).parent().removeClass("open"), $("#menu").removeClass("menu-open"))
        }), $(window).on(this.trigger, function (e) {
            var t = $(".dropdown.open .dropdown-menu"), o = $("#search-input");
            t.is(e.target) || 0 !== t.has(e.target).length || (e.stopPropagation(), $("#menu").removeClass("menu-open"), $(".dropdown").removeClass("open")), o.is(e.target) || 0 !== o.has(e.target).length || "search-input" !== document.activeElement.id || $("#search-input").blur()
        }), $("#dialog-click-area").on("mousedown", function (e) {
            var t = e.target || e.srcElement;
            "Range" === window.getSelection().type || $(document.activeElement).is("input") || ($(t).is(this) || $(t).is("#dialog-wrapper")) && (MolView.hideDialogs(), window.getSelection().removeAllRanges())
        }), $(".dialog .btn.close, .dialog-close-btn").on(this.trigger, function (e) {
            MolView.hideDialogs()
        }), $(".layer .btn.close").on(this.trigger, function (e) {
            MolView.setLayer("main")
        }), $(".expandable-title").on(this.trigger, function (e) {
            $(this).parent().toggleClass("open")
        }), $("#allow-tracking").on("change", function () {
            Preferences.set("molview", "allow_tracking", this.checked)
        }), this.addAction("layout_sketcher", "menu", !0), this.addAction("layout_model", "menu", !0), this.addAction("layout_vsplit", "menu", !0), this.addAction("layout_hsplit", "menu", !0), this.addAction("theme_desktop", "menu", !0), this.addAction("theme_touch", "menu", !0), this.addAction("help", "menu", !0), this.addAction("about", "menu", !0), this.addAction("share", "menu", !0), this.addAction("embed", "menu", !0), this.addAction("export_sketcher_png", "menu", !0), this.addAction("export_model_png", "menu", !0), this.addAction("export_model", "menu", !0), this.addAction("data_infocard", "menu", !0), this.addAction("data_spectra", "menu", !0), this.addAction("search_substructure", "menu", !0), this.addAction("search_superstructure", "menu", !0), this.addAction("search_similarity", "menu", !0), this.addAction("model_reset", "menu", !0), this.addAction("model_balls", "menu", !0), this.addAction("model_stick", "menu", !0), this.addAction("model_vdw", "menu", !0), this.addAction("model_wireframe", "menu", !0), this.addAction("model_line", "menu", !0), this.addAction("model_bg_black", "menu", !0), this.addAction("model_bg_gray", "menu", !0), this.addAction("model_bg_white", "menu", !0), this.addAction("engine_glmol", "menu", !0), this.addAction("engine_jmol", "menu", !0), this.addAction("engine_cdw", "menu", !0), this.addAction("cif_unit_cell", "menu", !0), this.addAction("cif_cubic_supercell", "menu", !0), this.addAction("cif_flat_supercell", "menu", !0), this.addAction("bio_assembly", "menu", !0), this.addAction("chain_type_ribbon", "menu", !0), this.addAction("chain_type_cylinders", "menu", !0), this.addAction("chain_type_btube", "menu", !0), this.addAction("chain_type_ctrace", "menu", !0), this.addAction("chain_type_bonds", "menu", !0), this.addAction("chain_color_ss", "menu", !0), this.addAction("chain_color_spectrum", "menu", !0), this.addAction("chain_color_chain", "menu", !0), this.addAction("chain_color_residue", "menu", !0), this.addAction("chain_color_polarity", "menu", !0), this.addAction("chain_color_bfactor", "menu", !0), this.addAction("jmol_hq", "menu", !0), this.addAction("jmol_clean", "menu", !0), this.addAction("jmol_mep_lucent", "menu", !0), this.addAction("jmol_mep_opaque", "menu", !0), this.addAction("jmol_charge", "menu", !0), this.addAction("jmol_bond_dipoles", "menu", !0), this.addAction("jmol_net_dipole", "menu", !0), this.addAction("jmol_minimize", "menu", !0), this.addAction("jmol_measure_distance", "menu", !0), this.addAction("jmol_measure_angle", "menu", !0), this.addAction("jmol_measure_torsion", "menu", !0), this.addAction("search_pubchem", "menu", !0), this.addAction("search_rcsb", "menu", !0), this.addAction("search_cod", "menu", !0), this.addAction("show_search_layer", "menu", !0), this.addAction("load_more_pubchem", "button", !0), this.addAction("load_more_rcsb", "button", !0), this.addAction("load_more_cod", "button", !0), this.addAction("mp_bond_single", "button", !0), this.addAction("mp_bond_double", "button", !0), this.addAction("mp_bond_triple", "button", !0), this.addAction("mp_bond_wedge", "button", !0), this.addAction("mp_bond_hash", "button", !0), this.addAction("mp_frag_benzene", "button", !0), this.addAction("mp_frag_cyclopropane", "button", !0), this.addAction("mp_frag_cyclobutane", "button", !0), this.addAction("mp_frag_cyclopentane", "button", !0), this.addAction("mp_frag_cyclohexane", "button", !0),this.addAction("mp_frag_cycloheptane", "button", !0),this.addAction("mp_chain", "button", !0),this.addAction("mp_charge_add", "button", !0),this.addAction("mp_charge_sub", "button", !0),this.addAction("mp_clear", "button", !0),this.addAction("mp_eraser", "button", !0),this.addAction("mp_drag", "button", !0),this.addAction("mp_undo", "button", !0),this.addAction("mp_redo", "button", !0),this.addAction("mp_rect", "button", !0),this.addAction("mp_lasso", "button", !0),this.addAction("mp_color_mode", "button", !0),this.addAction("mp_skeletal_formula", "button", !0),this.addAction("mp_center", "button", !0),this.addAction("mp_clean", "button", !0),this.addAction("mp_atom_c", "button", !0),this.addAction("mp_atom_h", "button", !0),this.addAction("mp_atom_n", "button", !0),this.addAction("mp_atom_o", "button", !0),this.addAction("mp_atom_p", "button", !0),this.addAction("mp_atom_s", "button", !0),this.addAction("mp_atom_f", "button", !0),this.addAction("mp_atom_cl", "button", !0),this.addAction("mp_atom_br", "button", !0),this.addAction("mp_atom_i", "button", !0),this.addAction("mp_periodictable", "button", !0),this.addAction("resolve", "button", !0),this.addAction("start_help", "button", !0),this.addAction("export_spectrum_png", "button", !0),this.addAction("export_spectrum_jcamp", "button", !0),$("#welcome-loading-msg").hide(),$("#welcome-button-bar").show(),$("#model-source").on(this.trigger, function () {
            MolView.pushEvent("link", "click", "model source", 0)
        }),$("#spectrum-nist-source").on(this.trigger, function () {
            MolView.pushEvent("link", "click", "spectrum nist source", 0)
        }),Model.init(function () {
            MolView.executeQuery(), Sketcher.markUpdated(), Request.CIR.available || Messages.alert("cir_down")
        }, "GLmol")
    },
    addAction: function (t, o, a) {
        $("#action-" + t.replace(/_/g, "-")).on(this.trigger, function (e) {
            $(this).hasClass("disabled") || $(this).hasClass("tool-button-disabled") || (a && Preferences.get("molview", "allow_tracking", !1) ? MolView.pushEvent(o, "click", t.replace(/_/g, " "), Actions[t].call(this) || 0) : Actions[t].call(this))
        })
    },
    pushEvent: function (e, t, o, a) {
        ga("send", "event", e, t, o, a)
    },
    executeQuery: function () {
        $.each(this.query, function (e, t) {
            "q" === e ? ($("#search-input").val(t), Messages.process(Loader.CIRsearch, "search")) : "smiles" === e ? Messages.process(function () {
                Loader.loadSMILES(t, document.title)
            }, "compound") : "cid" === e ? Loader.PubChem.loadCID(t, document.title) : "pdbid" === e ? Loader.RCSB.loadPDBID(t, t.toUpperCase()) : "codid" === e ? Loader.COD.loadCODID(t, document.title) : "dialog" === e ? MolView.showDialog(t) : "bg" === e && Model.setBackground(t)
        })
    },
    showDialog: function (e) {
        $("#dialog-overlay .dialog").hide(), $("#dialog-overlay").show(), $("#dialog-overlay").scrollTop(0), $("#" + e + "-dialog").show()
    },
    hideDialogs: function () {
        $("#dialog-overlay .dialog").hide(), $("#dialog-overlay").hide()
    },
    setLayer: function (e, t) {
        $(".layer").hide(), $("#" + e + "-layer").show(), "main" === e && ($("#main-layer").sizeChanged() || t) && ($("#main-layer").saveSize(), Sketcher.resize(), Model.resize())
    },
    setLayout: function (e) {
        $("#layout-menu > a").removeClass("selected"), $("#action-layout-" + e).addClass("selected"), $("#main-layer").removeClass("layout-sketcher layout-model layout-vsplit layout-hsplit").addClass("layout-" + e), this.layout = e, this.setLayer("main", !0)
    },
    setMenuLayout: function (e, t, o) {
        $("#search").css("margin", t ? 0 : ""), $("#search-input").css("width", t ? 100 : o ? $(window).width() - 90 : ""), $("#brand").toggle(!t), $("#search-dropdown .dropdown-menu").toggleClass("dropdown-left", $(window).width() >= $("#search-dropdown .dropdown-menu").outerWidth() && !t).toggleClass("dropdown-compact", e), $("#jmol-dropdown .dropdown-menu, #protein-dropdown .dropdown-menu").toggleClass("dropdown-left", e)
    },
    setTheme: function (e) {
        Preferences.set("molview", "theme", e), $("#action-theme-desktop, #action-theme-touch").removeClass("checked"), $("#action-theme-" + e).addClass("checked"), $("#theme-stylesheet").attr("href", "build/molview-" + e + ".min.css")
    },
    makeModelVisible: function () {
        "sketcher" === this.layout && MolView.setLayout("both")
    },
    alertEmptyInput: function () {
        null !== MolView.search_input_timeout && window.clearTimeout(MolView.search_input_timeout), window.setTimeout(function () {
            $("#search-input").addClass("alert").focus()
        }, 0), MolView.search_input_timeout = window.setTimeout(function () {
            $("#search-input").removeClass("alert")
        }, 1e3)
    },
    search_input_timeout: null
};
$(window).on("load", function () {
    MolView.init()
});